package com.coding.practice.arrays;
import java.util.Map;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

/**
 * Given a read only array of n + 1 integers between 1 and n, find one number 
 * that repeats in linear time using less than O(n) space and traversing the stream 
 * sequentially O(1) times.
 * Sample Input: [3 4 1 4 1]
 * Sample Output: 1
 * If there are multiple possible answers ( like in the sample case above ), output 
 * any one.
 * If there is no duplicate, output -1
 * @author Hemanth
 *
 */
public class DuplicateInRangeOfInts {
	
	Map<Integer, Integer> map = new HashMap<Integer, Integer>();
	
	// DO NOT MODIFY THE LIST
	public int repeatedNumber(final List<Integer> arr) {
		int size = arr.size();
		int n = size-1;
		int sqrtOfSize = (int)Math.sqrt(n);
		int bucket = -1;
		for(int i=0; i<size; i++) {
			int key = arr.get(i)/sqrtOfSize;
			if(map.containsKey(key)) {
				int val = map.get(key);
				map.put(key, val+1);
				if(val+1>=sqrtOfSize || 
						(key== sqrtOfSize && val+1 > (size-sqrtOfSize*sqrtOfSize))) {
					bucket = key;
				}
			} else {
				map.put(key, 1);
			}
		}
		System.out.println(size);
		System.out.println(bucket);
		// Reinitialize map
		for(int i=0; i<=sqrtOfSize; i++)
			map.put(i, 0);
		
		if(bucket == -1)
			return -1;
		for(int i=0; i<size; i++) {
			int key = arr.get(i)/sqrtOfSize;
			if(key == bucket) {
				System.out.println(arr.get(i));
				int newKey = arr.get(i) % sqrtOfSize;
				if(map.containsKey(newKey)) {
					int val = map.get(newKey);
					map.put(newKey, val+1);
					if(val+1 >1)
						return arr.get(i);
				} else {
					map.put(newKey, 1);
				}
			}
		}
		return -1;
	}
	
	public static void main(String args[]) {
		DuplicateInRangeOfInts d = new DuplicateInRangeOfInts();
		int arr[]= { 26, 307, 10, 410, 143, 118, 262, 6, 231, 175, 394, 2, 359, 408, 455, 13, 430, 412, 94, 121, 41, 63, 330, 165, 240, 169, 230, 99, 221, 192, 461, 313, 70, 427, 462, 30, 125, 133, 297, 187, 102, 74, 318, 375, 241, 22, 149, 259, 217, 226, 134, 148, 238, 440, 166, 28, 459, 306, 197, 454, 256, 389, 194, 248, 180, 456, 321, 279, 120, 250, 300, 355, 183, 272, 465, 27, 209, 327, 407, 122, 222, 308, 334, 200, 154, 91, 116, 263, 11, 83, 172, 98, 283, 301, 444, 173, 213, 25, 471, 144, 324, 368, 233, 317, 373, 108, 382, 176, 413, 384, 190, 17, 360, 388, 354, 448, 340, 24, 419, 184, 296, 177, 78, 128, 56, 329, 31, 428, 434, 285, 381, 42, 159, 9, 458, 7, 365, 357, 65, 281, 275, 326, 32, 377, 205, 109, 247, 87, 258, 163, 364, 290, 406, 39, 171, 282, 291, 168, 29, 193, 452, 111, 114, 44, 268, 335, 174, 356, 64, 202, 270, 372, 370, 131, 276, 343, 431, 81, 249, 350, 104, 361, 390, 331, 369, 254, 14, 442, 284, 401, 400, 351, 84, 242, 203, 214, 93, 3, 89, 72, 223, 110, 208, 105, 12, 52, 265, 179, 80, 86, 246, 195, 438, 198, 245, 251, 61, 311, 469, 219, 328, 145, 371, 404, 338, 228, 366, 309, 420, 271, 453, 395, 48, 67, 69, 4, 399, 435, 127, 425, 264, 45, 55, 376, 123, 54, 220, 403, 432, 161, 261, 137, 8, 40, 423, 337, 53, 422, 146, 38, 457, 255, 433, 378, 449, 320, 88, 312, 139, 156, 295, 260, 164, 349, 23, 58, 464, 426, 117, 273, 162, 186, 135, 447, 446, 387, 348, 392, 158, 79, 322, 196, 160, 346, 323, 362, 82, 90, 253, 286, 85, 49, 472, 278, 141, 374, 358, 129, 18, 126, 150, 299, 339, 142, 298, 269, 274, 46, 352, 51, 439, 34, 237, 396, 235, 185, 393, 191, 211, 383, 115, 224, 289, 106, 101, 216, 33, 207, 347, 20, 76, 421, 170, 363, 188, 310, 332, 302, 316, 201, 325, 189, 379, 73, 397, 152, 468, 96, 418, 303, 236, 443, 100, 68, 60, 470, 305, 345, 37, 252, 445, 409, 277, 405, 391, 292, 19, 36, 314, 424, 119, 167, 257, 304, 95, 206, 181, 319, 62, 293, 429, 451, 287, 35, 467, 353, 441, 97, 178, 463, 212, 336, 147, 132, 288, 136, 239, 77, 57, 414, 280, 266, 315, 210, 267, 50, 21, 244, 415, 386, 229, 157, 243, 398, 232, 130, 215, 138, 344, 218, 124, 402, 15, 341, 107, 92, 17, 103, 153, 227, 417, 385, 411, 416, 75, 234, 380, 43, 450, 1, 112, 151, 155, 66, 204, 367, 437, 342, 333, 466, 47, 71, 199, 16, 182, 140, 294, 59, 436, 225, 460, 113, 5 };
		int arr1[] = {247, 240, 303, 9, 304, 105, 44, 204, 291, 26, 242, 2, 358, 264, 176, 289, 196, 329, 189, 102, 45, 111, 115, 339, 74, 200, 34, 201, 215, 173, 107, 141, 71, 125, 6, 241, 275, 88, 91, 58, 171, 346, 219, 238, 246, 10, 118, 163, 287, 179, 123, 348, 283, 313, 226, 324, 203, 323, 28, 251, 69, 311, 330, 316, 320, 312, 50, 157, 342, 12, 253, 180, 112, 90, 16, 288, 213, 273, 57, 243, 42, 168, 55, 144, 131, 38, 317, 194, 355, 254, 202, 351, 62, 80, 134, 321, 31, 127, 232, 67, 22, 124, 271, 231, 162, 172, 52, 228, 87, 174, 307, 36, 148, 302, 198, 24, 338, 276, 327, 150, 110, 188, 309, 354, 190, 265, 3, 108, 218, 164, 145, 285, 99, 60, 286, 103, 119, 29, 75, 212, 290, 301, 151, 17, 147, 94, 138, 272, 279, 222, 315, 116, 262, 1, 334, 41, 54, 208, 139, 332, 89, 18, 233, 268, 7, 214, 20, 46, 326, 298, 101, 47, 236, 216, 359, 161, 350, 5, 49, 122, 345, 269, 73, 76, 221, 280, 322, 149, 318, 135, 234, 82, 120, 335, 98, 274, 182, 129, 106, 248, 64, 121, 258, 113, 349, 167, 192, 356, 51, 166, 77, 297, 39, 305, 260, 14, 63, 165, 85, 224, 19, 27, 177, 344, 33, 259, 292, 100, 43, 314, 170, 97, 4, 78, 310, 61, 328, 199, 255, 159, 185, 261, 229, 11, 295, 353, 186, 325, 79, 142, 223, 211, 152, 266, 48, 347, 21, 169, 65, 140, 83, 156, 340, 56, 220, 130, 117, 143, 277, 235, 59, 205, 153, 352, 300, 114, 84, 183, 333, 230, 197, 336, 244, 195, 37, 23, 206, 86, 15, 187, 181, 308, 109, 293, 128, 66, 270, 209, 158, 32, 25, 227, 191, 35, 40, 13, 175, 146, 299, 207, 217, 281, 30, 357, 184, 133, 245, 284, 343, 53, 210, 306, 136, 132, 239, 155, 73, 193, 278, 257, 126, 331, 294, 250, 252, 263, 92, 267, 282, 72, 95, 337, 154, 319, 341, 70, 81, 68, 160, 8, 249, 96, 104, 137, 256, 93, 178, 296, 225, 237 };
		ArrayList<Integer>  list = d.getListFromArray(arr1);
		
		System.out.println(d.repeatedNumber(list));
		
	}
	
	public ArrayList<Integer> getListFromArray(int arr[]) {
		ArrayList<Integer> list = new ArrayList<Integer>();
		for(int i=0;i<arr.length;i++)
			list.add(arr[i]);
		return list;
	}

}
