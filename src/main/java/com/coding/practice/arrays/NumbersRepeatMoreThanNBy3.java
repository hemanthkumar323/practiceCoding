package com.coding.practice.arrays;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

public class NumbersRepeatMoreThanNBy3 {

	public int repeatedNumber(final List<Integer> arr) {
		int size = arr.size();
		System.out.println(size);
		int temp1 = arr.get(0), counter1 = 1;
		int temp2 = Integer.MIN_VALUE, counter2 = 0;
		for (int i = 1; i < size; i++) {
			if (counter1 == 0 && temp2 != arr.get(i)) {
				counter1 = 1;
				temp1 = arr.get(i);
			} else if (arr.get(i) == temp1) {
				counter1++;
			} else if (counter2 == 0) {
				counter2 = 1;
				temp2 = arr.get(i);
			} else if (arr.get(i) == temp2) {
				counter2++;
			} else {
				counter1--;
				counter2--;
			}
		}

		counter1 = 0;
		counter2 = 0;

		// Check if really that element has existed more than n/3 times.
		for (int i = 0; i < size; i++) {
			if (arr.get(i) == temp1)
				counter1++;
			if (arr.get(i) == temp2)
				counter2++;
		}
		if (counter1 > size / 3)
			return temp1;
		else if (counter2 > size / 3)
			return temp2;
		else
			return -1;

	}

	public static void main(String args[]) {
		int arr[] = { 1, 2, 3, 1, 4, 3, 3 };
		int arr3[] = { 1000727, 1000727, 1000641, 1000517, 1000212, 1000532, 1000727, 1001000, 1000254, 1000106,
				1000405, 1000100, 1000736, 1000727, 1000727, 1000787, 1000105, 1000713, 1000727, 1000333, 1000069,
				1000727, 1000877, 1000222, 1000727, 1000505, 1000641, 1000533, 1000727, 1000727, 1000727, 1000508,
				1000475, 1000727, 1000573, 1000727, 1000618, 1000727, 1000309, 1000486, 1000792, 1000727, 1000727,
				1000426, 1000547, 1000727, 1000972, 1000575, 1000303, 1000727, 1000533, 1000669, 1000489, 1000727,
				1000329, 1000727, 1000050, 1000209, 1000109 };
		int arr4[] = { 1000069, 1000868, 1000069, 1000069, 1000782, 1000251, 1000431, 1000586, 1000069, 1000069,
				1000069, 1000683, 1000069, 1000234, 1000848, 1000069, 1000009, 1000069, 1000689, 1000593, 1000069,
				1000069, 1000069, 1000069, 1000350, 1000637, 1000363, 1000069, 1000939, 1000879, 1000725, 1000952,
				1000507, 1000069, 1000488, 1000069, 1000069, 1000784, 1000510, 1000069, 1000288, 1000878, 1000227,
				1000972, 1000272, 1000197, 1000069, 1000979, 1000373, 1000713, 1000331, 1000069, 1000069, 1000367,
				1000014, 1000185, 1000513, 1000757, 1000008, 1000069, 1000069, 1000342, 1000077, 1000069, 1000069,
				1000101, 1000106, 1000069, 1000069, 1000069, 1000822, 1000099, 1000696, 1000069, 1000069, 1000069,
				1000610, 1000069, 1000312, 1000069, 1000069, 1000610, 1000069, 1000959, 1000988, 1000982, 1000801,
				1000928, 1000738, 1000069, 1000884, 1000259, 1000325, 1000213, 1000069, 1000524, 1000867, 1000547,
				1000681, 1000284, 1000069, 1000668, 1000729, 1000178, 1000366, 1000304, 1000563, 1000069, 1000538,
				1000069, 1000069, 1000237, 1000069, 1000788, 1000727, 1000294, 1000741, 1000145, 1000803, 1001000,
				1000045, 1000069, 1000088, 1000058, 1000000, 1000229, 1000052, 1000069, 1000069, 1000069, 1000310,
				1000949, 1000181, 1000533, 1000278, 1000105, 1000069, 1000141, 1000824, 1000350, 1000737, 1000069,
				1000252, 1000069, 1000346, 1000388 };

		int arr1[] = { 1000545, 1000038, 1000647, 1000038, 1000562, 1000038, 1000586, 1000487, 1000951, 1000226,
				1000038, 1000145, 1000038, 1000761, 1000196, 1000038, 1000821, 1000829, 1000038, 1000570, 1000846,
				1000038, 1000178, 1001000, 1000038, 1000568, 1000278, 1000734, 1000048, 1000038, 1000002, 1000271,
				1000388, 1000315, 1000816, 1000038, 1000038, 1000846, 1000305, 1000853, 1000383, 1000116, 1000797,
				1000279, 1000038, 1000038, 1000049, 1000108, 1000789, 1000240, 1000201, 1000506, 1000429, 1000857,
				1000649, 1000898, 1000211, 1000000, 1000178, 1000038, 1000569, 1000695, 1000451, 1000159, 1000038,
				1000038, 1000038, 1000129, 1000038, 1000038, 1000904, 1000038, 1000038, 1000902, 1000525, 1000038,
				1000166, 1000038, 1000765, 1000038, 1000561, 1000417, 1000523, 1000668, 1000296, 1000038, 1000038,
				1000038, 1000461, 1000654, 1000924, 1000985, 1000038, 1000426, 1000038, 1000038, 1000038, 1000904,
				1000775, 1000148, 1000961, 1000038, 1000038, 1000038, 1000833, 1000332, 1000038, 1000038, 1000512,
				1000322, 1000592, 1000524, 1000788, 1000057, 1000497, 1000625, 1000599, 1000484, 1000038, 1000747,
				1000457, 1000111, 1000038, 1000038, 1000493, 1000287, 1000007, 1000695, 1000344, 1000098, 1000038,
				1000191, 1000038, 1000576, 1000481, 1000488, 1000199, 1000038, 1000663, 1000176, 1000038, 1000521,
				1000721, 1000728, 1000247, 1000038, 1000038, 1000460, 1000644, 1000038, 1000497, 1000966, 1000431,
				1000038, 1000975, 1000063, 1000580, 1000669, 1000038, 1000038, 1000492, 1000038, 1000038, 1000529,
				1000553, 1000333, 1000038, 1000341, 1000569, 1000862, 1000017, 1000532, 1000571, 1000508, 1000402,
				1000285, 1000611, 1000210, 1000646, 1000110, 1000038, 1000553, 1000273, 1000729, 1000038, 1000038,
				1000720, 1000400, 1000038, 1000983, 1000038, 1000766, 1000038, 1000180, 1000494, 1000765, 1000136,
				1000038, 1000029, 1000246, 1000991, 1000038, 1000759, 1000038, 1000038, 1000045, 1000038, 1000648,
				1000038, 1000038, 1000694, 1000914, 1000990, 1000038, 1000038, 1000758, 1000435, 1000038, 1000554,
				1000038, 1000452, 1000156, 1000038, 1000322, 1000828, 1000868, 1000038, 1000973, 1000991, 1000464,
				1000294, 1000633, 1000038, 1000582, 1000229, 1000285, 1000038, 1000038, 1000086, 1000038, 1000989,
				1000038, 1000038, 1000157, 1000307, 1000369, 1000300, 1000038, 1000038, 1000038, 1000244, 1000038,
				1000038, 1000222, 1000458, 1000038, 1000523, 1000434, 1000316, 1000038, 1000256, 1000038, 1000695,
				1000038, 1000469 };
		NumbersRepeatMoreThanNBy3 alg = new NumbersRepeatMoreThanNBy3();
		List<Integer> list = alg.getListFromArray(arr4);
		alg.bruteforce(arr4);
		;
		System.out.println(alg.repeatedNumber(list));
	}

	public List<Integer> getListFromArray(int arr[]) {
		List<Integer> list = new ArrayList<Integer>();
		for (int i = 0; i < arr.length; i++)
			list.add(arr[i]);
		return list;
	}

	public void bruteforce(int arr[]) {
		HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
		int size = arr.length;
		int ele = -1;
		for (int i = 0; i < size; i++) {
			int key = arr[i];
			if (map.containsKey(key)) {
				int count = map.get(key);
				map.put(key, count + 1);
				if (count + 1 > size / 3) {
					ele = key;
				}
			} else
				map.put(key, 1);
		}
		System.out.println(ele);
	}

}
